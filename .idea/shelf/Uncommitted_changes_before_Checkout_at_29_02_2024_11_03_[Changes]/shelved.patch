Index: image_processing.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport rawpy\r\nimport imageio\r\nimport cv2\r\nimport time\r\nfrom os import listdir\r\nfrom os.path import isfile, join\r\nfrom sklearn.cluster import DBSCAN\r\n\r\n\r\nclass ImageProcessing:\r\n    \"\"\"\r\n    Performs the image processing necessary to use the sample data in an AI.\r\n    \"\"\"\r\n    def __init__(self, samples_path, epsilon=10, min_samples=3):\r\n        \"\"\"\r\n        Opens the sample images from the folder and stores them in the samples dict\r\n\r\n        :param samples_path: The path to the sample images folder\r\n        :param epsilon: The max distance between nodes for DBSCAN\r\n        :param min_samples: The minimum number of samples to determine a class with DBSCAN\r\n        \"\"\"\r\n        only_files = [f for f in listdir(samples_path) if isfile(join(samples_path, f))]\r\n        self.samples = {}\r\n        self.found_larvae = {}\r\n        self.epsilon = epsilon\r\n        self.min_samples = min_samples\r\n        for path in only_files:\r\n            with rawpy.imread(samples_path + \"/\" + path) as raw:\r\n                rgb = raw.postprocess(no_auto_bright=True, output_bps=16,\r\n                                      demosaic_algorithm=rawpy.DemosaicAlgorithm(3),\r\n                                      output_color=rawpy.ColorSpace(2), use_camera_wb=True)\r\n                self.samples[path] = rgb\r\n\r\n    def set_dbscan(self, new_epsilon=10, new_min_samples=3):\r\n        \"\"\"\r\n        Sets the values of epsilon and min_samples\r\n        :param new_epsilon: New value of epsilon\r\n        :param new_min_samples: New value of min_samples\r\n        :return:\r\n        \"\"\"\r\n        self.epsilon = new_epsilon\r\n        self.min_samples = new_min_samples\r\n\r\n    def _separate_clusters(self, coords, size):\r\n        \"\"\"\r\n        Performs the DBSCAN algorithm and returns the cluster details\r\n\r\n        :param coords: The thresholded image as an array of coordinates.\r\n        :return: A dictionary of the image, coordinates and area of the clusters found.\r\n        \"\"\"\r\n        start_db = time.time()\r\n        db = DBSCAN(eps=self.epsilon, min_samples=self.min_samples).fit(coords)\r\n        end_db = time.time()\r\n        print(\"DB time: \" + str(end_db-start_db))\r\n        labels = db.labels_\r\n\r\n        unique_labels = set(labels)\r\n        core_samples_mask = np.zeros_like(labels, dtype=bool)\r\n        core_samples_mask[db.core_sample_indices_] = True\r\n\r\n        results = {}\r\n\r\n        for k in unique_labels:\r\n            if k != -1:\r\n                class_member_mask = labels == k\r\n                result = np.zeros(size)\r\n                class_coords = coords[class_member_mask & core_samples_mask]\r\n                for i in range(len(class_coords)):\r\n                    result[class_coords[i, 0], class_coords[i, 1]] = 1\r\n                results[\"DBSCAN mask \" + str(k)] = {}\r\n                results[\"DBSCAN mask \" + str(k)][\"image\"] = result\r\n                results[\"DBSCAN mask \" + str(k)][\"coords\"] = class_coords\r\n                results[\"DBSCAN mask \" + str(k)][\"area\"] = len(class_coords)\r\n        return results\r\n\r\n    def find_larvae(self, b):\r\n        \"\"\"\r\n        Finds the larvae in the image and returns the image, area and coordinates which\r\n        represent the larvae.\r\n\r\n        :param b: The blue channel from the image\r\n        :return: A dict containing the image area and coordinates of the larvae\r\n        \"\"\"\r\n        _, thresh_b_flies = cv2.threshold(b, 28000, 65535, cv2.THRESH_BINARY)\r\n        _, thresh_b_background = cv2.threshold(b, 50000, 65535, cv2.THRESH_BINARY)\r\n\r\n        # thresh_b_flies = cv2.bitwise_xor(thresh_b_flies, thresh_b_background)\r\n\r\n        thresh_b_flies_coords = np.argwhere(thresh_b_flies == 65535)\r\n        thresh_b_background_coords = np.argwhere(thresh_b_background == 65535)\r\n\r\n        clusters = {\"blue\": self._separate_clusters(thresh_b_flies_coords, b.shape)}\r\n\r\n        all_background_coords_array = thresh_b_background_coords.tolist()\r\n\r\n        larvae = {}\r\n        start_larvae = time.time()\r\n\r\n        inter_time = 0\r\n        if_time = 0\r\n\r\n        for t, frame in enumerate(clusters[\"blue\"]):\r\n            blue_frame_coords = clusters[\"blue\"][frame][\"coords\"].tolist()\r\n            start_inter = time.time()\r\n\r\n            inter = any(i in blue_frame_coords for i in all_background_coords_array)\r\n\r\n            end_inter = time.time()\r\n            inter_time += end_inter - start_inter\r\n\r\n            start_if = time.time()\r\n            if clusters[\"blue\"][frame][\"area\"] > 2000 and not inter:\r\n                larvae[\"frame\" + str(t)] = {}\r\n                larvae[\"frame\" + str(t)][\"image\"] = clusters[\"blue\"][frame][\"image\"]\r\n                larvae[\"frame\" + str(t)][\"area\"] = clusters[\"blue\"][frame][\"area\"]\r\n                larvae[\"frame\" + str(t)][\"coords\"] = clusters[\"blue\"][frame][\"coords\"]\r\n            end_if = time.time()\r\n            if_time += (end_if - start_if)\r\n        end_larvae = time.time()\r\n        print(\"Inter time: \" + str(inter_time))\r\n        print(\"If time: \" + str(if_time))\r\n        print(\"Larvae finding time: \" + str(end_larvae-start_larvae))\r\n        return larvae\r\n\r\n    def crop_flies(self, border, save_path):\r\n        \"\"\"\r\n        Finds the larvae in the sample image and saves individual images\r\n        of the cropped larvae.\r\n\r\n        :param border: The border around the cropped image\r\n        :param save_path: The path to save the cropped image\r\n        :return:\r\n        \"\"\"\r\n        start = time.time()\r\n        for sample in self.samples:\r\n            r, g, b = cv2.split(self.samples[sample])\r\n            self.found_larvae[sample] = self.find_larvae(b)\r\n            for n, larvae in enumerate(self.found_larvae[sample]):\r\n                self.found_larvae[sample][larvae][\"crop\"] = {}\r\n                maximums = np.max(self.found_larvae[sample][larvae][\"coords\"], axis=0)\r\n                minimums = np.min(self.found_larvae[sample][larvae][\"coords\"], axis=0)\r\n                self.found_larvae[sample][larvae][\"crop\"][\"x_max\"] = maximums[1] + border\r\n                self.found_larvae[sample][larvae][\"crop\"][\"x_min\"] = minimums[1] - border\r\n                self.found_larvae[sample][larvae][\"crop\"][\"y_max\"] = maximums[0] + border\r\n                self.found_larvae[sample][larvae][\"crop\"][\"y_min\"] = minimums[0] - border\r\n\r\n                crop_sample = self.samples[sample][self.found_larvae[sample][larvae][\"crop\"][\"y_min\"]:\r\n                                                   self.found_larvae[sample][larvae][\"crop\"][\"y_max\"],\r\n                                                   self.found_larvae[sample][larvae][\"crop\"][\"x_min\"]:\r\n                                                   self.found_larvae[sample][larvae][\"crop\"][\"x_max\"]]\r\n\r\n                imageio.imsave(save_path + sample + \"_\" + str(n) + '.tiff', crop_sample)\r\n\r\n        end = time.time()\r\n\r\n        print(\"Time taken: \" + str(end - start))\r\n\r\n    def make_mask(self, save_path):\r\n        \"\"\"\r\n        Finds the individual larvae in the sample image and saves a mask of the larvae\r\n        each represented by a different colour.\r\n\r\n        :param save_path: The path to save the images.\r\n        :return:\r\n        \"\"\"\r\n        colours = {\"red\": [0, 0, 1],\r\n                   \"green\": [0, 1, 0],\r\n                   \"blue\": [1, 0, 0],\r\n                   \"turquoise\": [1, 1, 0],\r\n                   \"magenta\": [1, 0, 1],\r\n                   \"yellow\": [0, 1, 1]}\r\n        start = time.time()\r\n        for sample in self.samples:\r\n            r, g, b = cv2.split(self.samples[sample])\r\n            b_mask = np.zeros(b.shape)\r\n            g_mask = np.zeros(g.shape)\r\n            r_mask = np.zeros(r.shape)\r\n            self.found_larvae[sample] = self.find_larvae(b)\r\n            for (_, larvae), (_, colour) in zip(self.found_larvae[sample].items(), colours.items()):\r\n                b_mask += (larvae[\"image\"] * colour[0]) * 255\r\n                g_mask += (larvae[\"image\"] * colour[1]) * 255\r\n                r_mask += (larvae[\"image\"] * colour[2]) * 255\r\n            image_merge = np.uint8(cv2.merge([r_mask, g_mask, b_mask]))\r\n            imageio.imsave(save_path + \"/\" + sample + '_mask.png', image_merge)\r\n\r\n        end = time.time()\r\n\r\n        print(\"Time taken: \" + str(end - start))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    start_path = \"C:/Users/Charlie/Documents/samples/samples_15_02_2024/test_14\"\r\n    end_path = \"C:/Users/Charlie/Documents/samples/samples_15_02_2024/test_14_masks_2\"\r\n    image_processing = ImageProcessing(start_path)\r\n    image_processing.make_mask(end_path)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/image_processing.py b/image_processing.py
--- a/image_processing.py	
+++ b/image_processing.py	
@@ -82,9 +82,13 @@
         :param b: The blue channel from the image
         :return: A dict containing the image area and coordinates of the larvae
         """
-        _, thresh_b_flies = cv2.threshold(b, 28000, 65535, cv2.THRESH_BINARY)
+        _, thresh_b_flies = cv2.threshold(b, 35000, 65535, cv2.THRESH_BINARY)
         _, thresh_b_background = cv2.threshold(b, 50000, 65535, cv2.THRESH_BINARY)
 
+        test1 = cv2.resize(thresh_b_flies, (500, 500))
+        cv2.imshow(test1)
+        cv2.waitKey(0)
+
         # thresh_b_flies = cv2.bitwise_xor(thresh_b_flies, thresh_b_background)
 
         thresh_b_flies_coords = np.argwhere(thresh_b_flies == 65535)
@@ -110,7 +114,7 @@
             inter_time += end_inter - start_inter
 
             start_if = time.time()
-            if clusters["blue"][frame]["area"] > 2000 and not inter:
+            if clusters["blue"][frame]["area"] > 1000 and not inter:
                 larvae["frame" + str(t)] = {}
                 larvae["frame" + str(t)]["image"] = clusters["blue"][frame]["image"]
                 larvae["frame" + str(t)]["area"] = clusters["blue"][frame]["area"]
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"485b6ea6-0649-464c-a025-7cc3a6a1b598\" name=\"Changes\" comment=\"Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm\">\r\n      <change afterPath=\"$PROJECT_DIR$/dbscan_test.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/image_processing.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/image_processing.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/image_recognition_ai.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/image_recognition_ai.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2cS2rqk3MChfzzRkmYFTHFNIFfu\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.dbscan_test.executor\": \"Run\",\r\n    \"Python.image_processing.executor\": \"Run\",\r\n    \"Python.image_processing_reformatted.executor\": \"Run\",\r\n    \"Python.image_recognition_ai.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"task__1__reformat__image__processing\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"image_processing\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"FlyBrains\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Charlie\\PycharmProjects\\FlyBrains\\image_processing.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.image_processing_reformatted\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-5a2391486177-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13763.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"485b6ea6-0649-464c-a025-7cc3a6a1b598\" name=\"Changes\" comment=\"\" />\r\n      <created>1708090860585</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1708090860585</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"image_processing.py first draft\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709068217714</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709068217714</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"image_processing.py first draft\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709068559264</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709068559264</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"added reformatted file replace original and delete this one once done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709072948299</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709072948299</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Initial formatting changes.&#10;- Made the ImageProcessing class&#10;- Transformed the preexisting methods to be internal methods of this object\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709139038005</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709139038005</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709142463541</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709142463541</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"master\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"User\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"*\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"user\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"*\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"image_processing.py first draft\" />\r\n    <MESSAGE value=\"added reformatted file replace original and delete this one once done\" />\r\n    <MESSAGE value=\"Initial formatting changes.&#10;- Made the ImageProcessing class&#10;- Transformed the preexisting methods to be internal methods of this object\" />\r\n    <MESSAGE value=\"Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,11 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="485b6ea6-0649-464c-a025-7cc3a6a1b598" name="Changes" comment="Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm">
-      <change afterPath="$PROJECT_DIR$/dbscan_test.py" afterDir="false" />
+    <list default="true" id="485b6ea6-0649-464c-a025-7cc3a6a1b598" name="Changes" comment="Added test to try and reduce run time of algorithm">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/dbscan_test.py" beforeDir="false" afterPath="$PROJECT_DIR$/dbscan_test.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/image_processing.py" beforeDir="false" afterPath="$PROJECT_DIR$/image_processing.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/image_recognition_ai.py" beforeDir="false" afterPath="$PROJECT_DIR$/image_recognition_ai.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -39,17 +38,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.dbscan_test.executor": "Run",
-    "Python.image_processing.executor": "Run",
-    "Python.image_processing_reformatted.executor": "Run",
-    "Python.image_recognition_ai.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "task__1__reformat__image__processing"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.dbscan_test.executor&quot;: &quot;Run&quot;,
+    &quot;Python.image_processing.executor&quot;: &quot;Run&quot;,
+    &quot;Python.image_processing_reformatted.executor&quot;: &quot;Run&quot;,
+    &quot;Python.image_recognition_ai.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;task__1__reformat__image__processing&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="image_processing" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="FlyBrains" />
@@ -75,7 +74,7 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Python.image_processing_reformatted" />
+        <item itemvalue="Python.image_processing" />
       </list>
     </recent_temporary>
   </component>
@@ -135,7 +134,15 @@
       <option name="project" value="LOCAL" />
       <updated>1709142463541</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Added test to try and reduce run time of algorithm">
+      <option name="closed" value="true" />
+      <created>1709151951163</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1709151951163</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -199,7 +206,8 @@
     <MESSAGE value="added reformatted file replace original and delete this one once done" />
     <MESSAGE value="Initial formatting changes.&#10;- Made the ImageProcessing class&#10;- Transformed the preexisting methods to be internal methods of this object" />
     <MESSAGE value="Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm" />
-    <option name="LAST_COMMIT_MESSAGE" value="Program testing done and implemented ability to change epsilon and minimum samples for DBSCAN algorithm" />
+    <MESSAGE value="Added test to try and reduce run time of algorithm" />
+    <option name="LAST_COMMIT_MESSAGE" value="Added test to try and reduce run time of algorithm" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: dbscan_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\n\r\nfrom image_processing import ImageProcessing\r\n\r\nstart_path = \"C:/Users/Charlie/Documents/samples/samples_15_02_2024/dbscan_test\"\r\nend_path = start_path\r\n\r\nprocessing = ImageProcessing(samples_path=start_path, epsilon=10, min_samples=5)\r\nprocessing.make_mask(end_path)\r\n\r\n\"\"\"\r\nprocessing.set_dbscan(new_epsilon=5)\r\nprocessing.make_mask(end_path)\r\n\r\nprocessing.set_dbscan(new_epsilon=5)\r\nprocessing.make_mask(end_path)\r\n\"\"\"\r\n
===================================================================
diff --git a/dbscan_test.py b/dbscan_test.py
--- a/dbscan_test.py	
+++ b/dbscan_test.py	
@@ -2,10 +2,10 @@
 
 from image_processing import ImageProcessing
 
-start_path = "C:/Users/Charlie/Documents/samples/samples_15_02_2024/dbscan_test"
+start_path = "D:/samples/test_1"
 end_path = start_path
 
-processing = ImageProcessing(samples_path=start_path, epsilon=10, min_samples=5)
+processing = ImageProcessing(samples_path=start_path, epsilon=10, min_samples=3)
 processing.make_mask(end_path)
 
 """
